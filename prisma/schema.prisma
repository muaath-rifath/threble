generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String            @unique
  username           String?           @unique
  password           String?
  image              String?
  coverImage         String?
  role               Role              @default(USER)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  preferences        Json?
  settings           Json?
  activities         Activity[]
  comments           Comment[]
  createdCommunities Community[]       @relation("CommunityCreator")
  communities        CommunityMember[]
  connectedTo        Connection[]      @relation("Connections")
  connections        Connection[]
  following          Follow[]          @relation("Follower")
  followers          Follow[]          @relation("Following")
  posts              Post[]
  reactions          Reaction[]
  profile            UserProfile?
  accounts           Account[]
  sessions           Session[]

  @@index([email, username])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id         String    @id @default(cuid())
  userId     String    @unique
  bio        String?
  avatar     String?
  coverImage String?
  location   String?
  website    String?
  birthDate  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id               String     @id @default(cuid())
  content          String
  authorId         String
  communityId      String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  mediaAttachments String[]
  visibility       String     @default("public")
  comments         Comment[]
  author           User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  community        Community? @relation(fields: [communityId], references: [id])
  reactions        Reaction[]
  parentId         String?
  parent           Post?       @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies          Post[]      @relation("PostReplies")

  @@index([authorId, createdAt])
  @@index([communityId, createdAt])
}

model Comment {
  id        String     @id @default(cuid())
  content   String
  authorId  String
  postId    String
  parentId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]  @relation("CommentReplies")
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  reactions Reaction[]

  @@index([authorId, createdAt])
  @@index([postId, createdAt])
  @@index([parentId])
}

model Community {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  creatorId   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  creator     User              @relation("CommunityCreator", fields: [creatorId], references: [id])
  members     CommunityMember[]
  posts       Post[]

  @@index([name])
  @@index([creatorId])
}

model CommunityMember {
  id          String    @id @default(cuid())
  userId      String
  communityId String
  role        String    @default("member")
  joinedAt    DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@index([communityId, userId])
}

model Reaction {
  id        String   @id @default(cuid())
  type      String
  userId    String
  postId    String
  commentId String?
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, type])
  @@index([postId, type])
  @@index([commentId, type])
}
model Activity {
  id        String   @id @default(cuid())
  type      String
  userId    String
  targetId  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Connection {
  id              String   @id @default(cuid())
  userId          String
  connectedUserId String
  createdAt       DateTime @default(now())
  connectedUser   User     @relation("Connections", fields: [connectedUserId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, connectedUserId])
  @@index([userId])
  @@index([connectedUserId])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}