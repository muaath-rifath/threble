generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  username      String   @unique 
  email         String   @unique
  image         String?
  posts         Post[]
  messages      Message[]
  groupMembers  GroupMember[]
  communityMembers CommunityMember[]
  files       File[]
  reactions   Reaction[]
}

model File {
  id        Int      @id @default(autoincrement())
  url       String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  messageId Int?
  message   Message? @relation(fields: [messageId], references: [id])
  createdAt DateTime @default(now())
}


enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

model Reaction {
  id            Int           @id @default(autoincrement())
  type          ReactionType
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  postId        Int?
  post          Post?         @relation(fields: [postId], references: [id])
  messageId     Int?
  message       Message?      @relation(fields: [messageId], references: [id])
  createdAt     DateTime      @default(now())
}
model Post {
  id            Int      @id @default(autoincrement())
  content       String
  authorId      Int
  author        User     @relation(fields: [authorId], references: [id])
  communityId   Int?
  community     Community? @relation(fields: [communityId], references: [id])
  files         File[]
  reactions     Reaction[]
}

model Message {
  id            Int      @id @default(autoincrement())
  content       String
  senderId      Int
  sender        User     @relation(fields: [senderId], references: [id])
  groupId       Int?
  group         Group?   @relation(fields: [groupId], references: [id])
  files         File[]
  reactions     Reaction[]
}

model Group {
  id            Int      @id @default(autoincrement())
  name          String
  messages      Message[]
  members       GroupMember[]
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
}
model GroupMember {
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  groupId       Int
  group         Group    @relation(fields: [groupId], references: [id])
  role          Role     @default(MEMBER)
  @@id([userId, groupId])
}
model Community {
  id            Int      @id @default(autoincrement())
  name          String
  isPrivate     Boolean
  posts         Post[]
  members       CommunityMember[]
}

model CommunityMember {
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  communityId   Int
  community     Community @relation(fields: [communityId], references: [id])
  role          Role     @default(MEMBER)
  @@id([userId, communityId])
}
